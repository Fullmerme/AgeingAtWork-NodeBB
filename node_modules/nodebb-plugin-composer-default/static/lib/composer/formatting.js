'use strict';

/* globals app, define, screenfull */

define('composer/formatting', ['composer/controls', 'composer/preview', 'composer/resize', 'composer/uploads'], function(controls, preview, resize, uploads) {

	var formatting = {};

	function validateForm(){
		return document.getElementById('formFile1').files.length > 0 &&
		document.getElementById('formFile2').files.length > 0 &&
		document.getElementById('trainingSubFolder').value !== "" &&
		document.getElementById('shortDescText').value !== "";
	}

	function validateTitle(){
		return $('.title.form-control')[0].tagName === "INPUT" && $('.title.form-control')[0].value === ""
	}

	function uploadFormFiles(){
		if(validateTitle()){
			app.alertError('Please fill the Topic Title');
		} else if(validateForm()){
			var files = new Array();
			files.push(document.getElementById('formFile1').files[0]);
			files.push(document.getElementById('formFile2').files[0]);

			var trainingSubFolder = document.getElementById('trainingSubFolder').value.replace(/\s/g, '_');

			var shortDescText = document.getElementById('shortDescText').value;

			switch($('.title.form-control')[0].tagName){
				case 'INPUT':
					var topicTitle = $('.title.form-control')[0].value ;
					break;
				case 'SPAN':
					var topicTitle = $('.title.form-control')[0].textContent ;
			}
			

			var fd = new FormData();

			if (files) {
				if (window.FormData) {
					for (var i = 0; i < files.length; ++i) {
						fd.append('files[]', files[i], files[i].name);
					}
				}
			}

			uploads.uploadContentFiles({
				files: files,
				formData: fd,
				route: '/api/post/upload',
				subFolder: trainingSubFolder,
				description: shortDescText,
				title: topicTitle
			});
		} else{
			app.alertError('Please fill all form fields');
		}
	}

	var formattingDispatchTable = {
		picture: function () {
			var postContainer = this;
			postContainer.find('#files').click();
		},

		upload: function () {
			var postContainer = this;
			postContainer.find('#files').click();
		},

		tags: function() {
			var postContainer = this;
			postContainer.find('.tags-container').toggleClass('hidden');
		},

		form: function() {
			var postContainer = this;
			postContainer.find('#customForm').toggleClass('hidden');
			document.getElementById('uploadFormFiles').addEventListener('click', uploadFormFiles);

		},

		zen: function() {
			var postContainer = this;
			$(window).one('resize', function() {
				function onResize() {
					if (!screenfull.isFullscreen) {
						app.toggleNavbar(true);
						$('html').removeClass('zen-mode');
						resize.reposition(postContainer);
						$(window).off('resize', onResize);
					}
				}

				if (screenfull.isFullscreen) {
					app.toggleNavbar(false);
					$('html').addClass('zen-mode');
					postContainer.find('.write').focus();

					$(window).on('resize', onResize);

					$(window).one('action:composer.topics.post action:composer.posts.reply action:composer.posts.edit action:composer.discard', screenfull.exit);
				}
			});

			screenfull.toggle();
		}
	};

	var buttons = [];

	formatting.addComposerButtons = function() {
		for(var x=0,numButtons=buttons.length;x<numButtons;x++) {
			$('.formatting-bar .formatting-group #fileForm').before('<li tabindex="-1" data-format="' + buttons[x].name + '" title="' + (buttons[x].title || '') + '"><i class="' + buttons[x].iconClass + '"></i></li>');
		}
	};

	formatting.addButton = function(iconClass, onClick, title) {
		var name = iconClass.replace('fa fa-', '');
		formattingDispatchTable[name] = onClick;
		buttons.push({
			name: name,
			iconClass: iconClass,
			title: title
		});
	};

	formatting.getDispatchTable = function () {
		return formattingDispatchTable;
	};

	formatting.addButtonDispatch = function(name, onClick) {
		formattingDispatchTable[name] = onClick;
	};

	formatting.addHandler = function(postContainer) {
		postContainer.on('click', '.formatting-bar li', function () {
			var format = $(this).attr('data-format'),
				textarea = $(this).parents('[component="composer"]').find('textarea')[0];

			if(formattingDispatchTable.hasOwnProperty(format)){
				formattingDispatchTable[format].call(postContainer, textarea, textarea.selectionStart, textarea.selectionEnd);
				preview.render(postContainer);
			}
		});
	};

	return formatting;
});
